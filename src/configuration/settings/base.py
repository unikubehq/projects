"""
Django settings for project service.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import configparser
import os
from datetime import timedelta

import sentry_sdk
from environs import Env
from sentry_sdk.integrations.django import DjangoIntegration

env = Env()


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
with open(os.path.join(BASE_DIR, "../version.txt")) as v_file:
    VERSION = v_file.read()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("DJANGO_SECRET_KEY", "<setme>")
SITE_ID = 1
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", False)

ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", ["*"])

ADMINS = [("Michael", "michael@blueshoe.de")]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.contenttypes",
    "django.contrib.staticfiles",
    "hurricane",
    "polymorphic",
    "graphene_django",
    "django_extensions",
    "backoffice",
    "projects.apps.ProjectsConfig",
    "sops.apps.SopsConfig",
    "gql",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "commons.middleware.TokenMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "configuration.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": env.str("DATABASE_NAME"),
        "USER": env.str("DATABASE_USER"),
        "HOST": env.str("DATABASE_HOST"),
        "PORT": env.int("DATABASE_PORT", 5432),
    }
}
if env.str("DATABASE_PASSWORD", None):
    DATABASES["default"]["PASSWORD"] = env.str("DATABASE_PASSWORD")

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_ROOT = env.str("DJANGO_STATIC_ROOT")
STATIC_URL = env.str("DJANGO_STATIC_URL", "/static/")

PUBLIC_URL_PREFIX = os.getenv("PUBLIC_URL_PREFIX", "/projects/")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "hurricane": {
            "handlers": ["console"],
            "level": os.getenv("HURRICANE_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "projects.helm": {
            "handlers": ["console", "mail_admins"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
        },
        # "django": {
        #     "handlers": ["console", "mail_admins"],
        #     "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
        # },
    },
}

HELM_EXECUTOR_HOST = os.getenv("HELM_EXECUTOR_HOST")
HELM_EXECUTOR_PORT = os.getenv("HELM_EXECUTOR_PORT")

REPOSITORY_ROOT = os.getenv("REPOSITORY_ROOT")

AUTH_USER_MODEL = "backoffice.AdminUser"


CELERY_TASK_ALWAYS_EAGER = DEBUG
CELERY_BROKER_URL = (
    f"amqp://{os.getenv('AMQP_USERNAME')}:{os.getenv('AMQP_PASSWORD')}@"
    f"{os.getenv('AMQP_HOST')}:{os.getenv('AMQP_PORT')}/{os.getenv('AMQP_VHOST')}"
)

GRAPHENE_PER_PAGE = 30
if os.getenv("SENTRY_DSN"):
    sentry_release = VERSION
    sentry_sdk.init(
        dsn=os.getenv("SENTRY_DSN"),
        integrations=[DjangoIntegration()],
        debug=DEBUG,
        environment=os.getenv("SENTRY_ENVIRONMENT"),
        release=sentry_release,
    )

TEST_RUNNER = "snapshottest.django.TestRunner"

HURRICANE_VERSION = VERSION
